@page "/"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject Services.AppState AppState


<h1>Switch control</h1>


<p>Current config status: @ConfigStatus</p>

<p>Current switch status: @Status</p>
<br>
<p>Guirlande</p>
<button class="btn btn-primary" @onclick="SwitchOn">Switch On</button>
<button class="btn btn-primary" @onclick="SwitchOff">Switch Off</button>
<br>
<p>Sapin</p>

<button class="btn btn-primary" @onclick="MXChipOn">Switch On</button>
<button class="btn btn-primary" @onclick="MXChipOff">Switch Off</button>


@code {
    private string currentValue;
    private string CurrentValue { get; set; }


    private string Status = "";
    private string ConfigStatus = "";
    private ReturnedValue result;


    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() => LoadConfig());
    }

    public async Task LoadConfig()
    {
        string SavedApiKey = AppState.ApiKey;
        Console.WriteLine("Config loaded from App State");
        if (String.IsNullOrEmpty(SavedApiKey))
        {
            Console.WriteLine("Current key is empty, attempting to read from cookie");
            SavedApiKey = await ReadCookie(AppState.CookieName);
            Console.WriteLine("Cookie read successfully, value = " + SavedApiKey);
            AppState.ApiKey = SavedApiKey;
            Console.WriteLine("Saved value to App State");
        }

        string ApiKey = AppState.ApiKey;
        Console.WriteLine("Api Key from AppState: " + ApiKey);
        //if (String.IsNullOrEmpty(ApiKey))
        if (ApiKey == "null")
        {
            Console.WriteLine("No Api Key could be retrieved, updating information message");
            ConfigStatus = "Config not ready, please set ApiKey in Configuration tab";
        }
        else
        {
            Console.WriteLine("Api Key could be retrieved from configuration, updating information message");
            ConfigStatus = "Config Ok";
        }

        Console.WriteLine("Updated display");

        return;
    }
    private async Task<string> ReadCookie(string _CookieName)
    {
        Console.WriteLine("Cookie Name: " + _CookieName);
        return (string)(await JSRuntime.InvokeAsync<string>("blazorExtensions.ReadCookie", _CookieName));
    }

    private void SetStatus(string status)
    {
        Status = status.ToString();
    }

    private async Task SwitchOn()
    {
        string url = "RelayControl?code=" + AppState.ApiKey + "&SetSwitch=On";
        await Http.GetFromJsonAsync<ReturnedValue>(url);
        SetStatus("On");
    }

    private async Task SwitchOff()
    {
        string url = "RelayControl?code=" + AppState.ApiKey + "&SetSwitch=Off";
        await Http.GetFromJsonAsync<ReturnedValue>(url);
        SetStatus("Off");
    }

    private async Task MXChipOn()
    {
        string url = "mxchip1control?code=" + AppState.ApiKey + "&SetSwitch=On&DeviceId=mxchip1";
        await Http.GetFromJsonAsync<ReturnedValue>(url);
        SetStatus("On");
    }

    private async Task MXChipOff()
    {
        string url = "mxchip1control?code=" + AppState.ApiKey + "&SetSwitch=Off&DeviceId=mxchip1";
        await Http.GetFromJsonAsync<ReturnedValue>(url);
        SetStatus("Off");
    }

    public class ReturnedValue
    {
        public HashSet<string> Value { get; set; }
    }
}
